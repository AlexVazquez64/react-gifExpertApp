{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAuCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAU,IAFL,mBAElCC,EAFkC,KAEtBC,EAFsB,KAiBzC,OAEE,uBAAMC,SAXa,SAAEC,GACrBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAe,MAMjB,UACE,8CACA,uBACEO,KAAK,OACLC,MAAQT,EACRU,SApBoB,SAAEP,GAC1BF,EAAeE,EAAEQ,OAAOF,c,+BCNfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAWH,GAF7C,+DAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCULO,EAVK,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEhC,OACE,sBAAKc,UAAU,0CAAf,UACE,qBAAKL,GAAKA,EAAKM,IAAMf,EAAMgB,IAAMN,IACjC,kCAAMA,EAAN,WC4BSO,EA9BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAN,SAAEA,GAAe,IAAD,EAEhBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KA6B1C,OArBAC,qBAAU,WAERxB,EAASC,GACNwB,MAAM,SAAAC,GAELC,YAAW,WAETJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAIV,UAIN,CAAEpB,IAIEqB,EDzB2BM,CAAc3B,GAAlCa,EAJkB,EAIxBN,KAAca,EAJU,EAIVA,QAEtB,OACE,qCAEA,mCAAOpB,EAAP,OAEEoB,GAAW,mBAAGJ,UAAU,sDAAb,wBAEb,qBAAKA,UAAU,YAAf,SAGMH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADEA,EAAIC,aEaViB,MA/Bf,WAAyB,IAAD,EAKlB1C,mBAAS,CACX,wBANoB,mBAGpBQ,EAHoB,KAIpBT,EAJoB,KAStB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEIS,EAAWe,KAAK,SAAAT,GAAQ,OAEtB,cAAC,EAAD,CAEEA,SAAWA,GADJA,Y,MClBrB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.439e639f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState( '' );\n\n  const handleInputChange = ( e ) => {\n    setInputValue( e.target.value );\n  }\n  \n  const handleSubmit = ( e ) => {\n    e.preventDefault();\n\n    if ( inputValue.trim().length > 2) {\n      setCategories( categories => [ inputValue, ...categories ]);\n      setInputValue( '' );\n    }\n  }\n\n  return (\n\n    <form onSubmit={ handleSubmit }>\n      <h2>Add Category</h2>\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange= { handleInputChange }\n      />\n    </form>\n\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n\n}\n\nexport default AddCategory\n","\n\nexport const getGifs = async( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=DEeKJL9KgX8rn9IxxVfvU0m0TWSX9uhl`;\n  const resp = await fetch( url );\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  });\n\n  return gifs;\n}","import React from 'react';\n\nconst GifGridItem = ({ id, title, url }) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn \">\n      <img id={ id } src={ url } alt={ title } />\n      <p> { title } </p>\n    </div>\n  );\n}\n\nexport default GifGridItem\n","import React from 'react'\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n  // const [images, setImages] = useState([]);\n\n  const { data: images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n    \n    <h3> { category } </h3>\n\n    { loading && <p className=\"animate__animated animate__flash animate__infinite \">loading...</p>}\n\n    <div className=\"card-grid\">\n\n        {\n          images.map( img => (\n            <GifGridItem\n              key= { img.id }\n              { ...img }\n            />\n          ))\n        }\n\n    </div>\n    \n    </>\n  );\n}\n\nexport default GifGrid\n","import { useEffect, useState } from 'react';\n\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n\n  });\n\n  useEffect(() => {\n    \n    getGifs( category )\n      .then( imgs => {\n\n        setTimeout(() => {\n          \n          setState({\n            data: imgs,\n            loading: false,\n  \n          });\n\n        }, 500);\n\n      })\n\n  }, [ category ])\n  \n  \n\n  return state; // { data: [], loading: true };\n}\n\n","import React, { useState } from 'react'\n\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nfunction GifExpertApp() {\n\n  const [\n    categories,\n    setCategories\n  ] = useState([\n    'Sakura Card Captors'\n  ]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories = { setCategories } />\n      <hr/>\n      \n      <ol>\n        {\n          categories.map( category => (\n            \n            <GifGrid\n              key= { category }\n              category={ category }\n            />\n            \n          ))\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}